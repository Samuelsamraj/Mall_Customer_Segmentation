# -*- coding: utf-8 -*-
"""MALL_Customer Segmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PBCvTTY6z263Jq_o_zRTVc-LGRqrB05b
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# **DATA PREPROCESSING**"""

data = pd.read_csv('Mall_Customers.csv')

data.head()

data.tail()

print('total columns -->>',data.shape[1])
print('total rows -->>',data.shape[0])

data.info()

data.isnull().sum()

data.describe()

data.columns

"""# **MODEL BUILDING**"""

X = data[['Annual Income (k$)', 'Spending Score (1-100)']]

from sklearn.cluster import KMeans

K_means = KMeans()
K_means.fit(X)

K_means = KMeans(n_clusters = 5)
K_means.fit_predict(X)

"""# **Elbow Method To Find Optimal Number of Clusters**"""

suit=[]
for i in range(1,11):
    k_means = KMeans(n_clusters=i)
    k_means.fit(X)
    suit.append(k_means.inertia_)

suit

plt.plot(range(1, 11), suit)

"""# **Model Training**"""

X = data[['Annual Income (k$)','Spending Score (1-100)']]

k_means = KMeans(n_clusters=5,random_state=42)
y_means = k_means.fit_predict(X)

y_means

plt.scatter(X.iloc[y_means==0,0],X.iloc[y_means==0,1],s=100,c='red',label="Cluster 1")
plt.scatter(X.iloc[y_means==1,0],X.iloc[y_means==1,1],s=100,c='yellow',label="Cluster 2")
plt.scatter(X.iloc[y_means==2,0],X.iloc[y_means==2,1],s=100,c='green',label="Cluster 3")
plt.scatter(X.iloc[y_means==3,0],X.iloc[y_means==3,1],s=100,c='blue',label="Cluster 4")
plt.scatter(X.iloc[y_means==4,0],X.iloc[y_means==4,1],s=100,c='black',label="Cluster 5")
plt.scatter(k_means.cluster_centers_[:,0],k_means.cluster_centers_[:,1],s=100,c="magenta")
plt.title("Customer Segmentation")
plt.xlabel("Annual Income")
plt.ylabel("Spending Score")
plt.legend()
plt.show()

k_means.predict([[15,39]])

import joblib

joblib.dump(k_means,"customer_segmentation")

model = joblib.load("customer_segmentation")

model.predict([[15,39]])

"""# **GUI**"""

from tkinter import *
import joblib

def show_entry_fields():
    p1=int(e1.get())
    p2=int(e2.get())

    model = joblib.load('Customer Segmentation')
    result=model.predict([[p1,p2]])
    print("This Customer belongs to cluster no: ", result[0])

    if result[0] == 0:
        Label(master, text="Customers with medium annual income and medium annual spend").grid(row=31)
    elif result[0]==1:
        Label(master, text="Customers with high annual income but low annual spend").grid(row=31)
    elif result[0]==2:
        Label(master, text="Customers with low annual income and low annual spend").grid(row=31)
    elif result[0]==3:
        Label(master, text="Customers low annual income but high annual spend").grid(row=31)
    elif result[0]==4:
        Label(master, text="Customers with high annual income and high annual spend").grid(row=31)

master = Tk()
master.title("Customer Segmentation Using Machine Learning")


label = Label(master, text = "Customer Segmentation Using Machine Learning"
                          , bg = "black", fg = "white"). \
                               grid(row=0,columnspan=2)

Label(master,text="Annual Income").grid(row=1)
Label(master, text="Spending Score").grid(row=2)


e1 = Entry(master)
e2 = Entry(master)

e1.grid(row=1, column=1)
e2.grid(row=2, column=1)

Button(master, text='Predict', command=show_entry_fields).grid()

mainloop()



